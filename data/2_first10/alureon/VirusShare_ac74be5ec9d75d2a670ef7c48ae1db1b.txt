push
mov
sub
push
push
push
neg
rol
neg
xor
lea
xor
push
xor
xor
neg
xor
mov
add
xchg
adc
adc
shl
ror
mov
ret
xor
xor
xor
not
lea
ror
not
lea
adc
lea
not
ror
and
not
xchg
lea
lea
mov
mov
mov
not
shl
shr
rol
lea
mov
lea
xor
xchg
mov
xor
rol
shr
ror
and
adc
lea
mov
mov
mov
xor
xor
shl
lea
shr
mov
not
mov
mov
xor
neg
neg
xor
xor
mov
mov
rcr
mov
xor
mov
rcl
not
adc
push
not
ror
rol
rcr
mov
neg
xor
and
neg
xchg
lea
mov
xchg
mov
lea
push
neg
rol
lea
lea
xor
call
push
mov
xchg
mov
mov
lea
xchg
lea
mov
pop
rcl
xor
xor
mov
lea
mov
xchg
xor
rcl
mov
neg
xchg
lea
neg
mov
lea
shl
lea
add
shr
mov
neg
mov
mov
rol
mov
cmp
je
not
xor
add
lea
mov
xor
xor
or
je
not
not
adc
neg
xor
ror
mov
lea
not
lea
mov
mov
adc
neg
and
lea
and
neg
neg
mov
xchg
xor
not
add
not
mov
mov
add
neg
lea
xor
add
lea
mov
lea
xor
neg
not
lea
mov
neg
not
lea
xor
mov
not
xor
neg
mov
xor
rcr
mov
mov
rcl
mov
rcr
mov
mov
neg
and
cmp
je
rcl
lea
mov
not
neg
not
xchg
ror
lea
xor
xor
neg
mov
rol
xor
xor
rol
lea
shr
rcr
neg
not
rcl
push
call
xor
xor
rol
neg
mov
mov
rol
mov
rol
not
mov
xchg
xor
xor
mov
not
mov
shr
neg
xor
movl
xor
mov
shr
neg
lea
and
movl
rcr
neg
not
xchg
lea
ror
lea
lea
shr
rol
mov
and
ror
mov
mov
neg
lea
lea
rcl
neg
lea
lea
mov
lea
push
xor
xor
mov
mov
push
adc
adc
mov
mov
pushl
adc
and
xor
mov
add
adc
xor
mov
pushl
adc
ror
xchg
xor
shr
xor
call
xchg
xor
adc
mov
mov
mov
neg
mov
xor
mov
neg
xor
rol
lea
shr
lea
mov
rcl
not
rol
rcr
shrl
xor
xor
rol
xor
mov
mov
lea
shl
rol
and
rol
mov
ror
mov
xchg
ror
neg
xor
mov
rcl
lea
mov
push
neg
not
mov
add
shl
add
and
mov
xor
and
add
xor
neg
xor
not
xor
neg
xchg
popl
mov
mov
lea
and
not
lea
add
mov
adc
xor
xor
xor
ror
mov
add
mov
rcr
neg
xor
decl
jne
mov
lea
not
adc
xor
lea
rol
neg
xchg
mov
mov
shr
lea
xor
mov
xchg
rcl
lea
mov
lea
adc
lea
xor
shl
mov
ror
mov
neg
mov
mov
xchg
mov
jmp
xor
xchg
and
mov
xchg
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
jmp
add
add
mov
pop
add
mov
pop
add
sbb
adc
je
adc
out
mov
test
mov
jecxz
rclb
sub
por
or
cmc
jbe
in
ror
sti
push
sbb
aad
jnp
push
push
mov
inc
hlt
mov
pop
push
pop
dec
fadd
xor
aas
mov
xchg
pop
add
sub
cvtdq2ps
push
mov
das
es
shrb
frstor
icebp
add
push
loop
shlb
jle
push
addr16
mov
mov
test
data16
fbstp
jbe
and
in
inc
aaa
outsl
movsl
pop
fstpt
mov
inc
mov
mov
and
adc
sub
pop
fildll
add
cwtl
test
pop
shlb
sbb
shll
add
pop
bound
xlat
mov
xor
pop
ret
pop
inc
and
pop
add
sub
daa
int3
ret
xchg
rcl
push
mov
movsb
cld
das
imul
hlt
and
push
mov
lahf
sti
mov
push
or
mov
fidivrl
popf
clc
das
add
stos
mov
shlb
nop
inc
nop
mov
sbb
mov
pop
mov
mov
cs
mov
insb
push
jmp
pop
movsb
cld
pop
out
mov
loope
add
xlat
inc
nop
mov
push
mov
repnz
mov
sbb
sub
mov
sbb
repz
shlb
loope,pn
and
inc
nop
mov
shl
pop
fbld
inc
shrb
rclb
je
fsubs
lods
pop
rorb
arpl
loope
sub
call
and
inc
nop
mov
or
ds
mov
sub
push
jno
out
lds
in
loope
mov
out
out
in
add
cmp
jo
sub
mov
lods
inc
jg
out
mov
gs
lds
std
jp
adc
add
mov
in
lret
aas
pusha
add
add
loop
push
pusha
add
bnd
and
jae
in
sti
sbb
jo
fidivrl
test
test
xchg
sbb
mov
jo
inc
and
pushf
cs
jb
sbb
jge
out
mov
loop
add
xor
call
mov
or
icebp
ljmp
mov
xchg
arpl
sub
lahf
mov
pop
or
sbb
nop
sti
dec
in
enter
lock
arpl
insb
sbb
mov
in
dec
add
push
sub
cmpsb
xor
jne
fisttpll
in
mov
push
addr16
push
mov
jnp
std
js
shlb
push
imul
sti
jnp
add
imul
dec
cmp
orl
pop
push
in
jo
out
sti
insb
movsb
cs
sub
pop
mov
daa
pusha
aas
xchg
out
mov
popf
jg
test
arpl
lds
xchg
lret
out
arpl
aas
pusha
add
std
inc
fwait
mov
mov
out
cwtl
mov
out
cmc
jo
popf
xor
jmp
jbe
push
testl
sbb
cmp
gs
addr16
mov
sar
pop
mov
daa
leave
cwtl
jns
ja
test
pusha
xchg
push
sub
add
bnd
and
arpl
mov
scas
mov
arpl
xchg
out
mov
ret
stos
scas
mov
cs
mov
in
add
lods
scas
mov
ficoml
loop
out
mov
jo
movsb
test
push
arpl
shrb
add
dec
sbb
mov
xchg
adc
and
enter
cmp
lods
scas
mov
jg
jne
push
scas
mov
test
jo
adc
mov
scas
mov
xlat
xchg
xlat
imul
xorl
out
add
imul
mov
xchg
loope
fs
out
mov
rolb
lea
mov
push
aad
jo
imul
lahf
gs
test
rorb
sti
test
mov
add
orl
mov
xchg
mov
fmuls
clc
call
ja
iret
gs
js
fwait
jl
pop
in
dec
sbb
faddl
xchg
mov
jg
movsl
mov
popf
pushf
std
jecxz
nop
es
gs
js
nop
test
add
scas
cmpsb
mov
push
pop
mov
sbb
add
fwait
gs
fs
fwait
jl
ljmp
mov
or
loop
loopne
mov
ja
sbb
or
xchg
out
imul
jne
jo
out
mov
pushf
sbb
es
fwait
andb
sahf
in
mulb
push
cmp
loop
ficomps
sbb
dec
jg
jne
push
incb
inc
pushf
sbb
jb
sbb
js
in
add
loope
orb
enter
ficompl
push
lahf
jne
push
insl
dec
fs
add
xchg
mov
pop
and
loope
adc
push
sub
xchg
out
mov
gs
js
pop
sub
out
add
xchg
cmp
ljmp
mov
and
jo
lcall
xchg
cli
mov
jns
int
xchg
insl
sub
out
mov
xor
mov
push
cli
mov
xchg
out
imul
pop
dec
jo
out
mov
mov
mov
cld
int3
call
adc
ds
lds
dec
repz
movsb
jo
out
add
lahf
sub
sti
mov
out
mov
out
push
fwait
in
add
inc
xorl
mov
jo
out
ja
lahf
adc
jl
in
shll
scas
test
xlat
loop
cmp
mov
mov
idiv
test
add
mov
je
daa
mov
sbb
lret
pusha
pop
imul
cmp
xchg
mov
icebp
das
sub
jno
sub
mov
out
jle
push
jo
and
inc
push
das
out
les
in
xchg
in
out
pop
testb
aas
jecxz
ljmp
xchg
jae
sub
jp
mov
cld
maxps
pop
fucomp
mov
cmpsl
fs
jnp
test
loop
jecxz
inc
push
cmc
insb
ficompl
hlt
xchg
pop
sbb
les
in
xor
pushf
mov
jmp
cmpb
clc
mov
mov
outsb
jns
in
mov
mov
xchg
cwtl
cmp
outsb
push
mov
add
xchg
fwait
loopne
cs
mov
sar
repnz
dec
inc
shl
add
sub
add
cld
xchg
xchg
pusha
subl
pop
xor
jmp
and
faddl
pop
push
jno
cs
ja
cwtl
pushf
sti
rorl
mov
xchg
fs
gs
icebp
jp
adc
test
jo
lcall
fwait
push
gs
xchg
cld
ret
add
hlt
sbb
jae
scas
scas
or
dec
rorb
mov
xchg
lcall
ljmp
icebp
jne
dec
dec
jg
sbb
push
loop
imul
lods
cs
and
mov
in
mov
gs
andb
dec
push
bound
je
mov
or
dec
lock
bound
add
push
loop
iret
enter
dec
mov
ja
icebp
adc
dec
fwait
sbb
fcomps
mov
adc
sub
mov
imul
jl
xchg
sbb
es
je
call
dec
loop
adc
into
call
stc
lret
add
mov
les
sbb
sarb
shlb
sub
insl
shll
cltd
stc
sub
sbb
mov
call
xor
jp
or
pop
jle
in
das
jg
mov
jecxz
test
addl
mov
xor
aad
adc
outsl
faddl
insl
dec
je
shrb
in
xchg
inc
push
sub
add
cmp
iret
ret
push
push
cli
insl
dec
pusha
stos
dec
cld
adc
js
js
jno
leave
imul
outsb
mov
cmpsl
rorl
xlat
aad
add
add
cmc
push
xlat
push
pop
andb
sbb
mov
stos
jne
push
ds
insl
or
xchg
or
imul
xchg
fdivrl
push
fistpll
fneni(8087
je
pop
sahf
xorb
fwait
and
fbstp
jo
test
push
add
loop
jns
sub
lods
mov
gs
js
mulb
mov
xchg
arpl
jno
dec
hlt
inc
out
std
mov
push
in
push
inc
pop
call
sbb
sbb
popf
push
into
jecxz
pop
sbb
int
aam
repnz
movsl
cmpsb
pop
out
mov
jg
ss
jle
movsl
aam
fwait
xchg
les
sbbb
pop
cli
sti
mov
xor
gs
inc
test
je
xor
jae
loopne
rcll
pop
jmp
sub
jne
cmp
adc
fildl
push
mov
mov
aad
cmpsb
shrb
xorl
loop
cmp
adc
fiaddl
dec
shr
mov
sbb
mov
jg
ret
divb
lcall
loopne
js
stos
xchg
cmp
enter
rcrb
push
movsl
push
je
dec
mov
xor
add
adc
xlat
std
cmp
cmp
sub
push
scas
sbbb
jl
in
fidivs
fiaddl
jg
outsl
sbb
push
popa
arpl
loopne
mov
add
sti
lods
int
mov
sahf
sub
jmp
pop
aas
arpl
test
mov
sti
pusha
mov
fs
push
or
test
loope
inc
repz
movsb
mov
mov
fisttps
jnp
push
scas
stos
scas
push
addr16
mov
jnp
adc
js
daa
lods
mov
int3
imul
das
ljmp
fimuls
push
jecxz
dec
lods
xchg
mov
jmp
push
mov
cmp
jecxz
jne
enter
fldl
mov
push
inc
mov
xchg
ljmp
sarl
cli
pop
mov
loopne
mov
adc
popf
fidivrl
imul
imul
repz
mov
loopne
dec
fdivr
jp
adc
shl
out
pop
repz
xchg
xchg
cmc
xchg
dec
fwait
mov
push
lea
and
out
xchg
cmc
sahf
jmp
movsb
je
inc
lea
mov
inc
sbb
or
invd
jl
push
fiaddl
outsb
lahf
negb
push
daa
filds
mov
add
fwait
xlat
fdiv
pushf
pushf
adcl
hlt
addr16
fs
pop
rcl
jns
jae
add
divl
jge
adcl
es
mov
idivb
mov
pop
jg
in
jae
out
js
arpl
xchg
fs
pushf
xchg
ja
mov
adc
cmpsl
jge
lds
popf
sub
lret
out
adc
mov
and
mov
lds
loopne
lds
addr16
mov
push
dec
loop
lret
repz
cli
xchg
adc
pusha
pop
out
leave
xor
idiv
cmpl
or
movsl
sbb
mov
arpl
rcrb
roll
imul
xchg
and
int3
sbb
ror
mov
lock
popa
maskmovq
mull
jns
loope
xor
cmp
sbbb
adc
push
jae
mov
push
pop
xchg
jl
inc
fidivrs
mov
cmpsb
fwait
imul
sahf
fwait
cmp
sbb
fcomi
cld
add
ljmp
and
jle
and
mov
pusha
inc
nop
out
dec
adc
xor
mov
xor
sbb
mov
pop
into
pop
xor
mov
dec
inc
loopne
mov
pop
jg
push
push
xor
xchg
mov
into
and
cltd
or
popa
pushf
rorl
dec
push
push
and
xchg
or
mov
push
xlat
in
dec
leave
cmp
mov
or
insl
xor
test
xchg
mov
mov
cmpsl
mov
sti
xchg
test
fsub
repnz
outsb
std
jmp
je
xchg
xor
in
paddb
xchg
lret
aad
popf
mov
movsl
mov
mov
mov
jge
ret
pop
xorb
jmp
lods
orb
jle
mov
mov
jbe
jmp
push
lods
sub
push
ret
scas
divb
insb
std
xor
jae
push
sub
ja
cmpl
leave
adc
out
cmpb
inc
and
fucomip
daa
daa
sahf
loope
ror
jle
xchg
xchg
dec
inc
push
mov
fsubs
xchg
mov
movsl
loop
bound
dec
or
test
cmp
enter
cmp
mov
aaa
xchg
test
in
dec
xchg
adc
mov
and
push
jmp
adc
mov
mov
hlt
mov
scas
push
imul
mov
or
xchg
fdivl
stos
pop
and
out
xor
push
dec
ja
enter
push
sub
lods
push
clc
orl
push
jg
out
jae
and
cli
loopne
cld
popf
rcrb
or
sub
.byte
pop
